// Generated by CoffeeScript 1.11.1

/*
 * Double Linked List Class
 * Written as part of the Bryce Summers Javascript Data Structures Libary.
 * Written by Bryce Summers on 1/3/2017.
 */

(function() {
  BDS.DoubleLinkedList = (function() {
    function DoubleLinkedList() {
      this.clear();
    }

    DoubleLinkedList.prototype.clear = function() {
      this._size = 0;
      this._head = new BDS.DoubleListNode(null, null, null);
      this._tail = new BDS.DoubleListNode(null, null, null);
      this._head.next = this._tail;
      return this._tail.prev = this._head;
    };

    DoubleLinkedList.prototype.isEmpty = function() {
      return this._size === 0;
    };

    DoubleLinkedList.prototype.size = function() {
      return this._size;
    };

    DoubleLinkedList.prototype.push_back = function(elem) {
      this._tail.data = elem;
      this._tail.next = new BDS.DoubleListNode(null, this._tail, null);
      this._tail = this._tail.next;
      this._size++;
    };

    DoubleLinkedList.prototype.pop_back = function() {
      var output;
      this._tail = this._tail.prev;
      this._tail.next.prev = null;
      this._tail.next = null;
      output = this._tail.data;
      this._tail.data = null;
      this._size--;
      return output;
    };

    DoubleLinkedList.prototype.push_front = function(elem) {
      this._head.data = elem;
      this._head.prev = new BDS.DoubleListNode(null, null, this._head);
      this._head = this._head.next;
      this._size++;
    };

    DoubleLinkedList.prototype.pop_front = function(elem) {
      var output;
      this._head = this._head.next;
      this._head.prev.next = null;
      this._head.prev = null;
      output = this._head.data;
      this._head.data = null;
      this._size--;
      return output;
    };

    DoubleLinkedList.prototype.add = function(elem) {
      this.push_back(elem);
    };

    DoubleLinkedList.prototype.push = function(elem) {
      this.push_back(elem);
    };

    DoubleLinkedList.prototype.pop = function(elem) {
      return this.pop_back();
    };

    DoubleLinkedList.prototype._remove = function(node) {
      if (node === this._head || node === this._tail) {
        throw new Error("Error: Do not attempt to remove the ending iterators, only use them to stop iteration.");
      }
      node.next.prev = node.prev;
      node.prev.next = node.next;
      this._size--;
    };

    DoubleLinkedList.prototype.append = function(array) {
      var e, i, len;
      for (i = 0, len = array.length; i < len; i++) {
        e = array[i];
        this.push_back(e);
      }
    };

    DoubleLinkedList.prototype.begin = function() {
      return new BDS.DoubleListIterator(this._head, this);
    };

    DoubleLinkedList.prototype.end = function() {
      return new BDS.DoubleListIterator(this._tail, this);
    };

    DoubleLinkedList.prototype.toString = function() {
      var iter, output, results;
      output = "";
      iter = this.iterator();
      results = [];
      while (iter.hasNext()) {
        results.push(output += iter.next());
      }
      return results;
    };

    return DoubleLinkedList;

  })();

  BDS.DoubleListNode = (function() {
    function DoubleListNode(data, prev, next) {
      this.data = data;
      this.prev = prev;
      this.next = next;
    }

    return DoubleListNode;

  })();

  BDS.DoubleListIterator = (function() {
    function DoubleListIterator(_node, _list) {
      this._node = _node;
      this._list = _list;
    }

    DoubleListIterator.prototype.hasNext = function() {
      return this._node.next.data !== null;
    };

    DoubleListIterator.prototype.hasPrev = function() {
      return this._node.prev.data !== null;
    };

    DoubleListIterator.prototype.next = function() {
      this._node = this._node.next;
      return this._node.data;
    };

    DoubleListIterator.prototype.prev = function() {
      this._node = this._node.prev;
      return this._node.data;
    };

    DoubleListIterator.prototype.current = function() {
      return this._node.data;
    };

    DoubleListIterator.prototype.remove = function() {
      return this._list._remove(this._node);
    };

    return DoubleListIterator;

  })();

}).call(this);
