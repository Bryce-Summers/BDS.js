// Generated by CoffeeScript 1.11.1

/*
Box.

Written by Bryce Summers on 1 - 5 - 2017
 */

(function() {
  BDS.Box = (function() {
    function Box(min, max, _isFilled) {
      this.min = min;
      this.max = max;
      this._isFilled = _isFilled;
      if (!this.min) {
        this.min = new BDS.Point(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);
      }
      if (!this.max) {
        this.max = new BDS.Point(Number.MIN_VALUE, Number.MIN_VALUE, Number.MIN_VALUE);
      }
      if (!this._isFilled) {
        this._isFilled = true;
      }
    }

    Box.prototype.clone = function() {
      return new BDS.Box(this.min.clone(), this.max.clone());
    };

    Box.prototype.isFilled = function() {
      return this._isFilled;
    };

    Box.prototype.expandByPoint = function(p) {
      this.min = this.min.min(p);
      return this.max = this.max.max(p);
    };

    Box.prototype.union = function(box) {
      var out;
      out = this.clone();
      out.min = this.min.min(box.min);
      out.max = this.max.max(box.max);
      return out;
    };

    Box.prototype.intersect = function(box) {
      var out;
      out = this.clone();
      out.min = this.min.max(box.min);
      out.max = this.max.min(box.max);
      return out;
    };

    Box.prototype.containsPoint = function(pt) {
      return pt.greaterThanOrEqual(this.min) && pt.lessThanOrEqual(this.max);
    };

    Box.prototype.getRandomPointInBox = function() {
      var range, x, y, z;
      range = this.max.sub(this.min);
      x = this.min.x + Math.random() * range.x;
      y = this.min.y + Math.random() * range.y;
      z = this.min.z + Math.random() * range.z;
      return new BDS.Point(x, y, z);
    };

    Box.prototype.area = function() {
      var area, diff;
      diff = this.max.sub(this.min);
      area = Math.abs(diff.x * diff.y);
      if (diff.x < 0 || diff.y < 0) {
        area = -area;
      }
      return area;
    };

    Box.prototype.intersects_box = function(box) {
      var intersection;
      intersection = this.intersect(box);
      return intersection.area() >= 0;
    };

    Box.prototype.toPolyline = function() {
      var p0, p1, p2, p3, points, polyline;
      p0 = this.min.clone();
      p1 = this.min.clone();
      p1.x = this.max.x;
      p2 = this.max.clone();
      p3 = this.min.clone();
      p3.y = this.max.y;
      points = [p0, p1, p2, p3];
      polyline = new BDS.Polyline(true, points, this._isFilled);
      return polyline;
    };


    /*
    Ray Queries
     */

    Box.prototype.rayQueryMin = function(rayQuery) {};

    Box.prototype.rayQueryAll = function(rayQuery) {};

    Box.prototype.rayQueryTime = function(rayQuery) {};

    Box.prototype.rayQueryTimes = function(rayQuery) {};

    return Box;

  })();

}).call(this);
