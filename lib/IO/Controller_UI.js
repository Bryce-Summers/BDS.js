// Generated by CoffeeScript 1.11.1
(function() {
  BDS.Controller_UI = (function() {
    function Controller_UI(_G) {
      this._G = _G;
      this._bvh = new BDS.BVH2D([]);
      this._elements = new Set();
      this._mouse_pressed = false;
      this._hover_element = null;
      this._clicked_element = null;
      this._c_resting = 0xe6dada;
      this._c_hover_nopress = 0xfaf8f8;
      this._c_hover_pressed = 0xa0a0a0;
      this._c_nohover_press = 0xc7acac;
      this._active = true;
    }

    Controller_UI.prototype.setActive = function(isActive) {
      return this._active = isActive;
    };

    Controller_UI.prototype.isActive = function() {
      return this._active;
    };

    Controller_UI.prototype.createButton = function(polyline, click_function, img) {

      /*
       * An element is an associative object of the following form:
       * {click:    () -> what happens when the user clicks on this element,
       *  fill:     The current fill color used to indicate the state of the button. 
       *  polyline: The polyline that represents the spatial extent for this UI element.
       *  image:    The image that will be drawn as an icon to represent the UI element.
       *            If image is null, then no image will be drawn.
       */
      var element;
      element = {
        click: click_function,
        color: this._c_resting,
        polyline: polyline,
        image: img
      };
      polyline.setAssociatedData(element);
      this._bvh.add(polyline);
      this._elements.add(element);
      return element;
    };

    Controller_UI.prototype.removeButton = function(b) {
      var a;
      a = this._elements["delete"](b);
      b = this._bvh.remove(b.polyline);
      return a && b;
    };

    Controller_UI.prototype.mouse_down = function(event) {
      if (this._mouse_pressed) {
        return;
      }
      this._mouse_pressed = true;
      if (this._hover_element !== null) {
        this._clicked_element = this._hover_element;
        return this._clicked_element.color = this._c_hover_pressed;
      }
    };

    Controller_UI.prototype.mouse_move = function(event) {
      var element, polyline, pt;
      pt = new BDS.Point(event.x, event.y);
      polyline = this._bvh.query_point(pt);
      element = null;
      if (polyline !== null) {
        element = polyline.getAssociatedData();
      }
      if (this._hover_element !== null) {
        this._hover_element.color = this._c_resting;
      }
      this._hover_element = element;
      if (this._hover_element !== null) {
        this._hover_element.color = this._c_hover_nopress;
      }
      if (this._clicked_element !== null) {
        if (this._clicked_element === this._hover_element) {
          return this._clicked_element.color = this._c_hover_pressed;
        } else {
          return this._clicked_element.color = this._c_hover_nopress;
        }
      }
    };

    Controller_UI.prototype.mouse_up = function(event) {
      if (!this._mouse_pressed) {
        return;
      }
      if (this._clicked_element === null) {
        this.finish();
        return;
      }
      if (this._hover_element === this._clicked_element) {
        this._hover_element.click();
        this._hover_element.color = this._c_hover_nopress;
      }
      return this.finish();
    };

    Controller_UI.prototype.time = function(dt) {
      var self;
      self = this;
      return this._elements.forEach((function(_this) {
        return function(element) {
          var fill, img, polyline, pt;
          polyline = element.polyline;
          fill = element.color;
          pt = polyline.getBoundingBox().min;
          img = element.image;
          if (img) {
            self._G.drawImage(img, pt.x, pt.y);
          }
          self._G.setAlpha(.2);
          self._G.fillColor(fill);
          self._G.drawPolygon(polyline);
          self._G.setAlpha(1.0);
          self._G.fillColor(0xffffff);
          return self._G.drawPolyline(polyline);
        };
      })(this));
    };

    Controller_UI.prototype.window_resize = function(event) {};

    Controller_UI.prototype.finish = function() {
      this._mouse_pressed = false;
      return this._clicked_element = null;
    };

    return Controller_UI;

  })();

}).call(this);

//# sourceMappingURL=Controller_UI.js.map
