// Generated by CoffeeScript 1.11.1

/*

FaceLink Data Structure.
Written by Bryce Summers on July.10.2017

Purpose: Low memory data structure for storing the linkages between the triangles in a manifold mesh.
         BDS.FaceLinkGraph may be used allocate and connect a bunch of face links.

     A +
       |\
       | \  @C
       |  \
    @B |   + B
       |  /
       | /  @A
       |/
     C +
 */

(function() {
  BDS.FaceLinkData = (function() {
    function FaceLinkData(faceLink) {
      this.faceLink = faceLink;

      /*
      Other data fields may be allocated here externally.
      Some common fields include:
       - triangle, a geometric structure corresponding to the indices.
       */
    }

    return FaceLinkData;

  })();

  BDS.FaceLink = (function() {
    function FaceLink() {
      this.data = new BDS.FaceLinkData(this);
      this.a = null;
      this.b = null;
      this.c = null;
    }

    return FaceLink;

  })();

  BDS.FaceLinkGraph = (function() {
    function FaceLinkGraph(indices) {
      this._faceLinks = null;
      this._build_from_indices(indices);
    }

    FaceLinkGraph.prototype._build_from_indices = function(indices) {
      debugger;
      var a, b, c, edge_a, edge_b, edge_c, facelink, i, index, j, len, link_a, link_b, link_c, map, ref;
      map = new Map();
      this._faceLinks = [];
      len = Math.floor(indices.length / 3);
      for (i = j = 0, ref = len; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        index = i * 3;
        a = indices[index];
        b = indices[index + 1];
        c = indices[index + 2];
        facelink = new BDS.FaceLink();
        this._faceLinks.push(facelink);
        edge_a = this._l2s(b, c);
        edge_b = this._l2s(c, a);
        edge_c = this._l2s(a, b);
        link_a = map.get(edge_a);
        if (link_a) {
          facelink.a = link_a;
          map["delete"](edge_a);
        } else {
          edge_a = this._l2s(c, b);
          map.set(edge_a, facelink);
        }
        link_b = map.get(edge_b);
        if (link_b) {
          facelink.b = link_b;
          map["delete"](edge_b);
        } else {
          edge_b = this._l2s(a, c);
          map.set(edge_b, facelink);
        }
        link_c = map.get(edge_c);
        if (link_c) {
          facelink.c = link_c;
          map["delete"](edge_c);
        } else {
          edge_c = this._l2s(b, a);
          map.set(edge_c, facelink);
        }
      }
    };

    FaceLinkGraph.prototype._l2s = function(i1, i2) {
      return "" + i1 + "_" + i2;
    };

    FaceLinkGraph.prototype.size = function() {
      return this._faceLinks.length;
    };

    FaceLinkGraph.prototype.get = function(index) {
      return this._faceLinks[index];
    };

    FaceLinkGraph.prototype.eval_data = function(func) {
      var faceLink, j, len1, ref;
      ref = this._faceLinks;
      for (j = 0, len1 = ref.length; j < len1; j++) {
        faceLink = ref[j];
        func(faceLink.data);
      }
    };

    FaceLinkGraph.prototype.map_data = function(func, inputs) {
      var faceLink, i, input, j, len, ref;
      len = this.size();
      for (i = j = 0, ref = len; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        faceLink = this._faceLinks[i];
        input = inputs[i];
        func(faceLink.data, input);
      }
    };

    return FaceLinkGraph;

  })();

}).call(this);

//# sourceMappingURL=FaceLink.js.map
